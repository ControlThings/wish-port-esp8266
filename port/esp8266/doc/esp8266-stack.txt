ESP8266 C stack size, "NONOS" SDK

The documentation does not give a clue about the C procedure call stack size on the ESP8266. So we find it out ourselves with this recursive function:

void probe_stack() {
    int32_t tmp = 0;
    os_printf("addr is %x\n", &tmp);
    probe_stack();
}

it will print out the address of the stack-allocated local variable at every recursion level. 

First invocation it prints:

addr is 3ffff7c0

Then it recurses down, and the last invocation that seems to succeed is:

addr is 3fffdfe0
 
The difference of these addresses:

3FFFF7C0-3FFFDFE0 (base 16) = 6112 (base 10), we note that this is equal to 6*1024-32 bytes. At the first print-out we have already made one function call.
How much space does one procedure call take?
The print-out of two consecutive calls from our test program:

addr is 3fffe020

addr is 3fffe000

The difference is actually 32 bytes (0x20)! So one function call (no arguments) "costs" 32 bytes of stack space. As our function probe_stack was called from user_init(), and the first print-out is after the first call (which thus accounts for the 32 bytes that are "missing"), can now say with a high level of confidence that the ESP8266 user program, as it enters user_init() has 6kB stack space at its disposal. The stack starts at 0x3FFFF7E0, grows downwards, and ends at 0x3fffdfe0

According to the ESP8266 memory map at https://github.com/esp8266/esp8266-wiki/wiki/Memory-Map, the these addresses are inside the "ETS system data RAM" area, which starts at 0x3FFFC000 and is 0x4000 bytes in size.

The symbol _stack_sentry:

We have seen in objdump dumps that there is a symbol named _stack_sentry. What is it? We "extern" it into our program, and print out its address:

addr is 3fffe000
stack sentry addr is 3fff4310
addr is 3fffdfe0
stack sentry addr is 3fff4310

It does not sem to move. Could it be the stack sentry for the *whole* program, ie. the place where the stack ends for the "ETS" system that runs our "user" program??

TODO:

Implement a "stack painting", as explained in this post:

http://www.avrfreaks.net/forum/soft-c-avrgcc-monitoring-stack-usage?page=all
