#
# NTC-10 temperature look-up table generator for ESP8266
#
# This Octave program will generate a NTC-10K temperature look-up table
# indexed by units of 1/1024 volts, compatible with the output from
# system_adc_read() library function.
#
# Table will be generated for the following resistor setup:
#           
#              Measurement point for ADC
#                 | 
#
#   Vcc ---/\/\---*---/\/\--- GND
#         NTC-10      Fixed
#         resistor    resistor
#         (Rntc)      (Rf)
#
# The measured voltage Um is the center point between a fixed 47K
# resistor (Rf), and the NTC resistor (Rt).
#
# The current I through the whole system is the same as the current
# through Rf, so·
# Um = I*Rf <=> I=Um/Rf
#
# The voltage Utot is the voltage over the whole resistor system Rf and
# Rt. The resistance of the whole system is Rtot = Rf + Rt.
# 
# Utot = Rtot * I  <=>
# Rtot = Utot/I    <=>
# Rt = Utot/I - Rf <=>
# Rt = Utot/(Um/Rf) - Rf.
# 
# Rf = 47K, Utot = 3.2V
# Applying the Steinhart-Hart equation, in B or β parameter form
# http://en.wikipedia.org/wiki/Thermistor
# 
# T = 1/(1/T0 + 1/B*ln(R/R0))
# 
# T0 = 25C = 298.15K, R0 = 10k for a NTC-10K B=3950K
#

output_file_name="ntc10_lookup.h"

# The A-D converter's precision (number of bits)
adc_bits=10
# The size (in ohms) of the fixed resistor of the voltage division
Rf=2.2*10^3
# The voltage over the resistor system
Utot=3.3;

# The "Kelvin offset", 0C = 273.15K
K=273.15;
# NTC-10 parameter B
B=3950
# NTC-10 parameter T0 = +25C
T0=25+K
# NTC-10 parameter R0, the nominal resistance at T0, 10K ohm
R0=10*10^3

# This is the C type (along with qualifiers) of the generated table
data_type="const int32_t"

# This is the declaration specifier, put here e.g. section attributes so
# that the array ends up properly in ROM/Flash (if applicable)
decl_spec="__attribute__ ((section(\".irom0.text\"))) __attribute__ ((aligned(4)))"

fid=fopen(output_file_name, "w");
fprintf(fid, "/* Warning! Autogenerated table ahead! */\n")
fprintf(fid, "%s %s ntc10_lookup[%i] = {", data_type, decl_spec, 2^adc_bits);
for reading = 0:(2^adc_bits-1)
    voltage = reading/1024;
    # The sensed NTC resistance corresponding to measurement
    Rntc = Utot/(voltage/Rf)-Rf;
    # The calculated temperature in Kelvin
    temperature = 1/(1/T0+1/B*log(Rntc/R0));
    approximate_temperature = round((temperature-K)*10);
    fprintf(fid,
        "%i, /* voltage=%fV, Rntc=%f ohm, exact temp=%fC */\n", 
        approximate_temperature,  voltage, Rntc, temperature-K);
endfor
fprintf(fid,"};\n");
fclose(fid);
